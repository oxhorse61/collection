package com.example.pre1.service;

import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversation;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationParam;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationResult;
import com.alibaba.dashscope.common.MultiModalMessage;
import com.alibaba.dashscope.common.Role;
import com.alibaba.dashscope.exception.NoApiKeyException;
import com.alibaba.dashscope.exception.UploadFileException;
import com.alibaba.dashscope.utils.Constants;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.example.pre1.dto.AnalysisResponse;

import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.Arrays;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

@Service
public class AIService {

    private final String apiKey;
    private final ObjectMapper objectMapper = new ObjectMapper();

    public AIService(@Value("${dashscope.api.key}") String apiKey) {
        this.apiKey = apiKey;
        if (this.apiKey != null && !this.apiKey.isEmpty()) {
            Constants.apiKey = this.apiKey;
        } else {
            throw new IllegalArgumentException("Dashscope API Key cannot be null or empty. Please check your application.properties file.");
        }
    }

    public AnalysisResponse analyzeImage(MultipartFile imageFile, String imageType) throws NoApiKeyException, UploadFileException, IOException {

        MultiModalConversation conversation = new MultiModalConversation();

        // --- 核心修正：不再创建临时文件，而是直接在内存中进行Base64编码 ---

        // 1. 获取图片的字节数组
        byte[] imageBytes = imageFile.getBytes();
        // 2. 将字节数组编码为Base64字符串
        String base64Image = Base64.getEncoder().encodeToString(imageBytes);
        // 3. 构建Data URI，这是Dashscope SDK支持的格式
        String dataUri = "data:" + imageFile.getContentType() + ";base64," + base64Image;

        // ----------------------------------------------------------------

        String textPrompt = getPromptForImageType(imageType);

        Map<String, Object> imageContent = new HashMap<>();
        // 将构建好的Data URI作为图片内容
        imageContent.put("image", dataUri);
        Map<String, Object> textContent = new HashMap<>();
        textContent.put("text", textPrompt);

        MultiModalMessage userMessage = MultiModalMessage.builder()
                .role(Role.USER.getValue())
                .content(Arrays.asList(imageContent, textContent))
                .build();

        MultiModalConversationParam param = MultiModalConversationParam.builder()
                .model("qwen-vl-plus")
                .message(userMessage)
                .build();

        // 这里的调用现在不会再触发文件上传
        MultiModalConversationResult result = conversation.call(param);
        String responseText = result.getOutput().getChoices().get(0).getMessage().getContent().get(0).get("text").toString();

        return parseQwenResponse(responseText, imageType);
    }

    private String getPromptForImageType(String imageType) {
        // ... (此方法无需修改) ...
        if ("tongue".equalsIgnoreCase(imageType)) {
            return "你是一位专业的中医舌象质检员。请判断这张图片是否是一张清晰、能完整看到舌体的舌象图片。同时要检查除了舌象外的其他背景不能占用太大画面，包括人脸，也就是说要保证图像 中尽量只有舌头部分，不要出现过多人脸部分，但是出现舌头周围的人脸部分是可以接受的。合格的图像标准是图像中尽量只有舌象或者背景不影响人脸的识别。光线也要考虑进去，但是不要对光线要求过于严苛，要保证五官特征清晰可辨，就将'goodLighting'设为true。请严格以JSON格式返回结果，仅包含布尔值字段: isTongue, isClear, goodLighting, isComplete, 以及一个中文的 reason 字符串说明不合格的主要原因。";
        } else { // face
            return "你是一位专业的人脸识别系统质检员。请判断这张图片是否是一张清晰、五官无遮挡的正面人脸照片。同时要检查除了面相外的其他背景不能占用太大画面，合格的图像标准是图像中尽量只有人脸或者背景不影响人脸的识别。光线也要考虑进去，但是不要对光线要求过于严苛，要保证五官特征清晰可辨，就将'goodLighting'设为true。请严格以JSON格式返回结果，仅包含布尔值字段: isFace, isClear, goodLighting, noObstruction, 以及一个中文的 reason 字符串说明不合格的主要原因。";
        }
    }

    private AnalysisResponse parseQwenResponse(String responseText, String imageType) {
        // ... (此方法无需修改) ...
        try {
            String jsonStr = responseText.substring(responseText.indexOf('{'), responseText.lastIndexOf('}') + 1);
            JsonNode analysisJson = objectMapper.readTree(jsonStr);

            boolean isApproved;
            if ("tongue".equalsIgnoreCase(imageType)) {
                isApproved = analysisJson.path("isTongue").asBoolean(false) &&
                        analysisJson.path("isClear").asBoolean(false) &&
                        analysisJson.path("isComplete").asBoolean(false);
            } else {
                isApproved = analysisJson.path("isFace").asBoolean(false) &&
                        analysisJson.path("isClear").asBoolean(false) &&
                        analysisJson.path("noObstruction").asBoolean(false);
            }
            String reason = analysisJson.path("reason").asText("AI未提供原因");

            return new AnalysisResponse(isApproved, reason);
        } catch (Exception e) {
            System.err.println("解析AI响应失败: " + e.getMessage());
            System.err.println("原始响应文本: " + responseText);
            return new AnalysisResponse(false, "解析AI响应失败: " + e.getMessage());
        }
    }
}
